{"version":3,"sources":["tr-trustpass.js"],"names":["window","angular","trTrustpass","$compile","$timeout","link","scope","element","attrs","ngModel","transclude","validatePasswordStrength","password","checklist","test","tests","options","hasOwnProperty","isAllValid","checkIsAllValid","$setValidity","flag","extend","lowercase","uppercase","number","special","minimum","maximum","word","toggle","minlength","maxlength","keepHeight","messageGuide","lowercaseLabel","uppercaseLabel","numberLabel","specialLabel","minimumLabel","maximumLabel","wordLabel","messageDone","ngMaxlength","ngMinlength","p","length","$parsers","unshift","$watch","$render","$viewValue","val","$setPristine","$setViewValue","$dirty","$pristine","isVisible","bind","$apply","template","parentNode","insertBefore","nextSibling","initialHeight","clientHeight","restrict","require","value","module","directive","$inject"],"mappings":"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","file":"tr-trustpass.min.js","sourcesContent":["(function(window, angular) {\n  'use strict';\n\n  /**\n   * @ngdoc directive\n   * @module trTrustpass\n   * @name trTrustpass\n   * @restrict A\n   * @scope\n   */\n  angular\n    .module('trTrustpass', [])\n    .directive('trTrustpass', trTrustpass);\n\n  trTrustpass.$inject = ['$compile', '$timeout'];\n\n  function trTrustpass($compile, $timeout) {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      scope: {\n        value: '=ngModel',\n        trTrustpass: '=trTrustpass'\n      },\n      link: link\n    };\n\n    function link(scope, element, attrs, ngModel, transclude) {\n\n      scope.isAllValid = false;\n      scope.checklist = {};\n\n      // Extend our default options with user provided options\n      scope.options = angular.extend({\n\n          // Tests\n          // \"A word character\": a character from a-z, A-Z, 0-9, including the _ (underscore) character.\n          lowercase: true, // Find a-z\n          uppercase: true, // Find A-Z\n          number: true, // Find 0-9\n          special: true, // Find a non-word character or the _ (underscore) character\n          minimum: true, // Check minimum length\n          maximum: false, // Check maximum length\n          word: false, // Find a word character\n\n          // Settings\n          toggle: false,\n          minlength: 8,\n          maxlength: 50,\n          keepHeight: false,\n          messageGuide: '',\n\n          // Text\n          lowercaseLabel: 'One lowercase character',\n          uppercaseLabel: 'One uppercase character',\n          numberLabel: 'One number',\n          specialLabel: 'One special character',\n          minimumLabel: 'characters minimum',\n          maximumLabel: 'characters maximum',\n          wordLabel: 'Alphanumeric characters',\n          messageDone: 'Great! Your password is secure.'\n      }, scope.trTrustpass);\n\n\n      /**\n       * Override options with min/maxlength attributes (either native HTML)\n       */\n      if(attrs.ngMaxlength || attrs.maxlength) {\n        scope.options.maxlength = attrs.ngMaxlength || attrs.maxlength;\n      }\n      if(attrs.ngMinlength || attrs.minlength) {\n        scope.options.minlength = attrs.ngMinlength || attrs.minlength;\n      }\n\n      /**\n       * Available tests to run\n       * Tests should return true or false\n       * Should test at least for one character occurance\n       */\n      var tests = {\n        word:      function(p) { return p && /[\\w]/.test(p) ? true : false; },\n        lowercase: function(p) { return p && /[a-z]/.test(p) ? true : false; },\n        uppercase: function(p) { return p && /[A-Z]/.test(p) ? true : false; },\n        number:    function(p) { return p && /\\d/.test(p) ? true : false; },\n        special:   function(p) { return p && /[_\\W]/.test(p) ? true : false; },\n        minimum:   function(p) { return p && p.length >= scope.options.minlength ? true : false; },\n        maximum:   function(p) { return p && p.length <= scope.options.maxlength ? true : false; },\n      };\n\n\n      // Add our custom parser into model's $parsers\n      ngModel.$parsers.unshift(validatePasswordStrength);\n\n      // Watch for changes in value\n      scope.$watch('value', validatePasswordStrength);\n\n      // Update the passport field whenever the value on the scope changes from outside\n      ngModel.$render = function() {\n        if(ngModel.$viewValue) {\n          element.val(ngModel.$viewValue);\n        }\n      };\n\n      // On form or controller reset\n      ngModel.$setPristine = function() {\n        ngModel.$setViewValue('');\n        ngModel.$dirty = false;\n        ngModel.$pristine = true;\n      };\n\n      // If toggling is in use, toggle on element focus\n      scope.isVisible = !scope.options.toggle;\n      if(scope.options.toggle) {\n        scope.isVisible = false;\n        element\n          .bind('focus', function() {\n            scope.isVisible = true;\n            scope.$apply();\n          })\n          .bind('blur', function() {\n            scope.isVisible = false;\n            scope.$apply();\n          });\n      }\n\n      /**\n       * Append the template below input\n       * This could be done with\n       */\n      var template = angular.element(\n        '<section class=\"trustpass\" ng-show=\"isVisible\" ng-style=\"{height: (options.keepHeight ? initialHeight : \\'auto\\')}\">' +\n          '<div class=\"trustpass-guide\" ng-if=\"isVisible && !isAllValid && options.messageGuide\" ng-bind=\"options.messageGuide\"></div>' +\n          '<ul class=\"trustpass-checklist\" ng-show=\"isVisible && !isAllValid\">' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.word,      \\'trustpass-yep\\': checklist.word      }\" ng-if=\"options.word\">{{ ::options.wordLabel }}</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.lowercase, \\'trustpass-yep\\': checklist.lowercase }\" ng-if=\"options.lowercase\">{{ ::options.lowercaseLabel }}</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.uppercase, \\'trustpass-yep\\': checklist.uppercase }\" ng-if=\"options.uppercase\">{{ ::options.uppercaseLabel }}</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.number,    \\'trustpass-yep\\': checklist.number    }\" ng-if=\"options.number\">{{ ::options.numberLabel }}</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.special,   \\'trustpass-yep\\': checklist.special   }\" ng-if=\"options.special\">{{ ::options.specialLabel }}</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.minimum,   \\'trustpass-yep\\': checklist.minimum   }\" ng-if=\"options.minimum\">{{ ::options.minlength }} {{ ::options.minimumLabel }}</li>' +\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.maximum,   \\'trustpass-yep\\': checklist.maximum   }\" ng-if=\"options.maximum\">{{ ::options.maxlength }} {{ ::options.maximumLabel }}</li>' +\n          '</ul>' +\n          '<div class=\"trustpass-done\" ng-show=\"isVisible && isAllValid\" ng-bind=\"options.messageDone\"></div>' +\n        '</section>');\n      // This would be jQuery's contentTr.insertAfter(element); ...but we don't want to depend on jQuery here.\n      element[0].parentNode.insertBefore(template[0], element[0].nextSibling);\n      $compile(template)(scope);\n\n      // If keepHeight is true, save the initial height of the dropdown\n      if(scope.options.keepHeight) {\n        $timeout(function(){\n          scope.initialHeight = element[0].nextSibling.clientHeight + 'px';\n        });\n      }\n\n      /**\n       * Run validators for a string\n       * It's absolutely vital this returns the original string for ngModel.$parsers\n       *\n       * @param String password\n       * @return String\n       */\n      function validatePasswordStrength(password) {\n        var checklist = {};\n\n        // Loop trough possible tests\n        for(var test in tests) {\n          // Is test enabled?\n          if(scope.options[test] === true) {\n            // Run test (but only if we have a password string)\n            checklist[test] = tests.hasOwnProperty(test) ? tests[test](password) : false;\n          }\n        }\n\n        scope.checklist = checklist;\n        scope.isAllValid = checkIsAllValid(checklist);\n        ngModel.$setValidity('trustpass', scope.isAllValid);\n\n        return password;\n      }\n\n      /**\n       * Determine if all required tests pass\n       *\n       * @param Object checklist\n       * @return Boolean\n       */\n      function checkIsAllValid(checklist) {\n        for(var flag in checklist) {\n          // Check if the test is supposed to be validated and if the test fails\n          if(checklist[flag] === false) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n    }\n\n  }\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}